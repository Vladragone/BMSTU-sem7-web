openapi: 3.0.1
info:
  title: FindMe API
  description: REST API
  version: v1
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/users:
    post:
      tags:
      - user-controller
      summary: Регистрация нового пользователя
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "409":
          description: Пользователь с таким именем или почтой уже существует
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "201":
          description: Пользователь успешно зарегистрирован
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/tokens:
    post:
      tags:
      - auth-controller
      summary: Создание JWT токена по логину и паролю
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "401":
          description: Неверные логин или пароль
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        "200":
          description: Успешная аутентификация
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        "500":
          description: Внутренняя ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v1/locations:
    get:
      tags:
      - location-controller
      summary: Получить список всех локаций
      operationId: getAllLocations
      responses:
        "200":
          description: Локации успешно получены
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        "204":
          description: Локации отсутствуют
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    post:
      tags:
      - location-controller
      summary: Создать новую локацию
      operationId: createLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        "201":
          description: Локация успешно создана
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
  /api/v1/gamesessions:
    post:
      tags:
      - game-session-controller
      summary: Создать новую игровую сессию
      operationId: createGameSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameSession'
        required: true
      responses:
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameSession'
        "201":
          description: Игровая сессия успешно создана
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameSession'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameSession'
  /api/v1/feedbacks:
    post:
      tags:
      - feedback-controller
      summary: Добавить отзыв/обратную связь
      operationId: addFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
        required: true
      responses:
        "201":
          description: Отзыв успешно сохранён
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Feedback'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Feedback'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Feedback'
  /api/v1/faqs:
    get:
      tags:
      - faq-controller
      summary: Получить список всех FAQ
      operationId: getAllFaqs
      responses:
        "200":
          description: FAQ успешно получены
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faq'
        "204":
          description: FAQ отсутствуют
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faq'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faq'
    post:
      tags:
      - faq-controller
      summary: Создать новый FAQ
      operationId: createFaq
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faq'
        required: true
      responses:
        "201":
          description: FAQ создан
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
  /api/v1/profiles/me:
    get:
      tags:
      - profile-controller
      summary: Получить профиль текущего пользователя
      operationId: getMyProfile
      responses:
        "401":
          description: Неавторизован
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "200":
          description: Профиль найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "404":
          description: Профиль не найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
    patch:
      tags:
      - profile-controller
      summary: Обновить профиль текущего пользователя
      operationId: updateMyProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
        required: true
      responses:
        "401":
          description: Неавторизован
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "200":
          description: Профиль обновлён
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "404":
          description: Профиль не найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Profile'
  /api/v1/faqs/{id}:
    get:
      tags:
      - faq-controller
      summary: Получить FAQ по ID
      operationId: getFaqById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: FAQ не найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "200":
          description: FAQ найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
    delete:
      tags:
      - faq-controller
      summary: Удалить FAQ по ID
      operationId: deleteFaq
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: FAQ удалён
        "404":
          description: FAQ не найден
        "500":
          description: Ошибка сервера
    patch:
      tags:
      - faq-controller
      summary: Обновить существующий FAQ
      operationId: updateFaq
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faq'
        required: true
      responses:
        "200":
          description: FAQ обновлён
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "404":
          description: FAQ не найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Faq'
  /api/v1/users/{username}:
    get:
      tags:
      - user-controller
      summary: Получить данные пользователя по username
      operationId: getUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Пользователь не найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "200":
          description: Пользователь найден
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/ratings:
    get:
      tags:
      - rating-controller
      summary: Получить рейтинг игроков
      operationId: getRatings
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
      - name: sortBy
        in: query
        required: false
        schema:
          type: string
          default: points
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 3
      responses:
        "200":
          description: Рейтинг успешно получен
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RatingResponse'
        "401":
          description: Неавторизован
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RatingResponse'
        "400":
          description: Некорректный запрос
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RatingResponse'
        "404":
          description: Пользователь не найден в рейтинге
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RatingResponse'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RatingResponse'
  /api/v1/locations/random:
    get:
      tags:
      - location-controller
      summary: Получить случайную локацию по имени
      operationId: getRandomLocation
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Локация найдена
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
        "404":
          description: Локации с таким именем не существует
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
  /api/v1/locations/names:
    get:
      tags:
      - location-controller
      summary: Получить список всех уникальных имён локаций
      operationId: getAllLocationNames
      responses:
        "204":
          description: Названия отсутствуют
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "200":
          description: Названия успешно получены
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /api/v1/game-errors:
    get:
      tags:
      - game-error-controller
      summary: Получить список ошибок игры
      operationId: getAllGameErrors
      responses:
        "204":
          description: Ошибки отсутствуют
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameError'
        "200":
          description: Ошибки успешно получены
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameError'
        "500":
          description: Ошибка сервера
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameError'
components:
  schemas:
    RegistrationRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    TokenResponse:
      type: object
      properties:
        token:
          type: string
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double
    GameSession:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userLat:
          type: number
          format: double
        userLng:
          type: number
          format: double
        correctLat:
          type: number
          format: double
        correctLng:
          type: number
          format: double
        earnedScore:
          type: integer
          format: int32
    Feedback:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        rating:
          type: integer
          format: int32
        problem:
          type: string
        description:
          type: string
    Faq:
      type: object
      properties:
        id:
          type: integer
          format: int64
        question:
          type: string
        answer:
          type: string
        userId:
          type: integer
          format: int64
    ProfileUpdateRequest:
      type: object
      properties:
        score:
          type: integer
          format: int32
    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        score:
          type: integer
          format: int32
        regDate:
          type: string
          format: date-time
        gameNum:
          type: integer
          format: int32
    RatingResponse:
      type: object
      properties:
        top:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
        yourRank:
          type: integer
          format: int32
        sortBy:
          type: string
    GameError:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
